<%- include('../partials/header') %>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="mb-0">Chi Tiết Điểm Danh Lớp</h1>
        <p class="mb-0 text-muted">
            <i class="bi bi-calendar-event me-1"></i>
            <%= moment(selectedDate).format('DD/MM/YYYY') %> (<%= moment(selectedDate).format('dddd') %>)
        </p>
    </div>
    <div>
        <a href="/academic/attendance/class?classId=<%= schedule._id %>" class="btn btn-outline-primary me-2">
            <i class="bi bi-arrow-left me-1"></i> Quay lại
        </a>
        <button class="btn btn-primary" id="saveAllBtn">
            <i class="bi bi-save me-1"></i> Lưu tất cả
        </button>
    </div>
</div>

<!-- Thông tin lớp -->
<div class="card border-0 shadow-sm mb-4 rounded-3 overflow-hidden">
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <h5 class="card-title mb-3 text-primary"><i class="bi bi-book me-2"></i><%= schedule.name %></h5>
                <p class="mb-2"><i class="bi bi-person-circle me-2 text-primary"></i> Giáo viên: <strong><%= schedule.teacher ? schedule.teacher.name : 'Chưa có' %></strong></p>
                <p class="mb-2"><i class="bi bi-people me-2 text-primary"></i> Sĩ số: <strong><%= schedule.students ? schedule.students.length : 0 %> học sinh</strong></p>
            </div>
            <div class="col-md-6 text-md-end">
                <div class="mb-3">
                    <div class="input-group date-selector">
                        <input type="date" class="form-control" id="dateSelector" value="<%= moment(selectedDate).format('YYYY-MM-DD') %>">
                        <button class="btn btn-primary" type="button" id="goToDate">
                            <i class="bi bi-calendar3"></i> Chọn ngày
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Danh sách điểm danh -->
<div class="card border-0 shadow-sm mb-4 rounded-3 overflow-hidden">
    <div class="card-header bg-transparent d-flex justify-content-between align-items-center py-3">
        <h5 class="mb-0"><i class="bi bi-list-check me-2 text-primary"></i>Danh sách điểm danh</h5>
        <div class="attendance-legend d-flex">
            <span class="me-3"><i class="bi bi-circle-fill text-success"></i> Có mặt</span>
            <span class="me-3"><i class="bi bi-circle-fill text-danger"></i> Vắng mặt</span>
            <span><i class="bi bi-circle-fill text-warning"></i> Đi muộn</span>
        </div>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-light">
                    <tr>
                        <th style="width: 50px; font-weight: 500">STT</th>
                        <th style="font-weight: 500">Học sinh</th>
                        <th style="font-weight: 500">Trạng thái</th>
                        <th style="font-weight: 500">Ghi chú</th>
                        <th style="width: 120px; font-weight: 500">Thao tác</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (schedule.students && schedule.students.length > 0) { %>
                        <% schedule.students.forEach(function(student, index) { 
                            const attendance = attendanceMap[student._id.toString()];
                            const status = attendance ? attendance.status : '';
                            const note = attendance ? attendance.note : '';
                            const attendanceId = attendance ? attendance._id : 'new';
                        %>
                            <tr data-student-id="<%= student._id %>" data-attendance-id="<%= attendanceId %>" class="<%= status === 'absent' ? 'absent-highlight' : '' %>">
                                <td><%= index + 1 %></td>
                                <td class="fw-medium"><%= student.name %></td>
                                <td>
                                    <select class="form-select status-select">
                                        <option value="" <%= !status ? 'selected' : '' %>>-- Chọn trạng thái --</option>
                                        <option value="present" <%= status === 'present' ? 'selected' : '' %>>Có mặt</option>
                                        <option value="absent" <%= status === 'absent' ? 'selected' : '' %>>Vắng mặt</option>
                                        <option value="late" <%= status === 'late' ? 'selected' : '' %>>Đi muộn</option>
                                    </select>
                                </td>
                                <td>
                                    <input type="text" class="form-control note-input" placeholder="Ghi chú" value="<%= note %>">
                                </td>
                                <td>
                                    <div class="d-flex">
                                        <button class="btn btn-sm btn-primary me-1 save-btn" title="Lưu">
                                            <i class="bi bi-save"></i>
                                        </button>
                                        <% if (attendance) { %>
                                            <button class="btn btn-sm btn-outline-danger delete-btn" title="Xóa" data-id="<%= attendance._id %>">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        <% } %>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="5" class="text-center py-4">
                                <div class="py-5">
                                    <i class="bi bi-people text-muted fs-1 mb-3"></i>
                                    <h5 class="mb-3">Lớp này chưa có học sinh nào</h5>
                                    <p class="text-muted mb-0">Vui lòng thêm học sinh vào lớp học trước</p>
                                </div>
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<style>
    .attendance-legend span {
        display: inline-flex;
        align-items: center;
        font-size: 0.9rem;
    }
    
    .attendance-legend i {
        margin-right: 5px;
    }
    
    .status-select option[value="present"] {
        background-color: rgba(46, 204, 113, 0.1);
    }
    
    .status-select option[value="absent"] {
        background-color: rgba(231, 76, 60, 0.1);
    }
    
    .status-select option[value="late"] {
        background-color: rgba(243, 156, 18, 0.1);
    }
    
    /* Highlight học sinh vắng mặt */
    tr.absent-highlight {
        background-color: rgba(231, 76, 60, 0.15) !important;
        border-left: 3px solid rgba(231, 76, 60, 0.5) !important;
    }
    
    .status-select[data-status="absent"] {
        background-color: rgba(231, 76, 60, 0.1);
        border-color: rgba(231, 76, 60, 0.3);
    }
    
    .date-selector {
        max-width: 300px;
        margin-left: auto;
    }
    
    .table {
        margin-bottom: 0;
    }
    
    .table tbody tr:hover {
        background-color: rgba(67, 97, 238, 0.03);
    }
    
    .table th {
        font-weight: 500 !important;
        color: #444 !important;
        border-top: none;
        background-color: #f8f9fa;
    }
    
    .card {
        border-radius: 12px;
        overflow: hidden;
    }
    
    .btn-primary {
        background-color: #4361ee;
        border-color: #4361ee;
    }
    
    .btn-primary:hover {
        background-color: #3a56d4;
        border-color: #3a56d4;
    }
    
    .btn-outline-primary {
        color: #4361ee;
        border-color: #4361ee;
    }
    
    .btn-outline-primary:hover {
        background-color: #4361ee;
        border-color: #4361ee;
    }
    
    .form-control:focus, 
    .form-select:focus {
        border-color: #4361ee;
        box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.25);
    }
    
    .text-primary {
        color: #4361ee !important;
    }
    
    .form-control, .form-select, .btn {
        border-radius: 6px;
    }
    
    .bi-circle-fill.text-success {
        color: #2ecc71 !important;
    }
    
    .bi-circle-fill.text-danger {
        color: #e74c3c !important;
    }
    
    .bi-circle-fill.text-warning {
        color: #f39c12 !important;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Highlight học sinh vắng mặt
        document.querySelectorAll('.status-select').forEach(select => {
            if (select.value === 'absent') {
                select.closest('tr').classList.add('absent-highlight');
                select.setAttribute('data-status', 'absent');
            }
            
            select.addEventListener('change', function() {
                const row = this.closest('tr');
                
                // Xóa lớp highlight cũ
                row.classList.remove('absent-highlight');
                this.classList.remove('status-select-absent');
                this.removeAttribute('data-status');
                
                // Thêm lớp highlight mới nếu là vắng mặt
                if (this.value === 'absent') {
                    row.classList.add('absent-highlight');
                    this.classList.add('status-select-absent');
                    this.setAttribute('data-status', 'absent');
                }
                
                // Đánh dấu thay đổi để hiển thị nút lưu
                row.setAttribute('data-changed', 'true');
            });
        });
        
        // Xử lý khi chọn ngày
        document.getElementById('goToDate').addEventListener('click', function() {
            const selectedDate = document.getElementById('dateSelector').value;
            if (selectedDate) {
                window.location.href = `/academic/attendance/class/<%= schedule._id %>?date=${selectedDate}`;
            }
        });
        
        // Xử lý khi nhấn Enter trong input ngày
        document.getElementById('dateSelector').addEventListener('keyup', function(e) {
            if (e.key === 'Enter') {
                document.getElementById('goToDate').click();
            }
        });
        
        // Lưu điểm danh cho một học sinh
        document.querySelectorAll('.save-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const row = this.closest('tr');
                const studentId = row.dataset.studentId;
                const attendanceId = row.dataset.attendanceId;
                const status = row.querySelector('.status-select').value;
                const note = row.querySelector('.note-input').value;
                
                if (!status) {
                    alert('Vui lòng chọn trạng thái điểm danh');
                    return;
                }
                
                try {
                    const response = await fetch(`/academic/attendance/update/${attendanceId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            studentId,
                            date: '<%= moment(selectedDate).format("YYYY-MM-DD") %>',
                            status,
                            note,
                            scheduleId: '<%= schedule._id %>'
                        }),
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        // Cập nhật ID nếu là bản ghi mới
                        if (attendanceId === 'new' && data.attendance && data.attendance._id) {
                            row.dataset.attendanceId = data.attendance._id;
                            
                            // Thêm nút xóa nếu chưa có
                            if (!row.querySelector('.delete-btn')) {
                                const saveBtn = row.querySelector('.save-btn');
                                const deleteBtn = document.createElement('button');
                                deleteBtn.className = 'btn btn-sm btn-outline-danger delete-btn';
                                deleteBtn.title = 'Xóa';
                                deleteBtn.innerHTML = '<i class="bi bi-trash"></i>';
                                deleteBtn.dataset.id = data.attendance._id;
                                saveBtn.after(deleteBtn);
                                
                                // Thêm event listener cho nút xóa mới
                                deleteBtn.addEventListener('click', handleDelete);
                            }
                        }
                        
                        // Hiệu ứng thành công
                        const originalColor = row.style.backgroundColor;
                        row.style.backgroundColor = 'rgba(46, 204, 113, 0.1)';
                        setTimeout(() => {
                            row.style.backgroundColor = originalColor;
                        }, 800);
                        
                        // Thông báo thành công
                        showToast('Đã lưu điểm danh thành công!', 'success');
                    } else {
                        alert('Lỗi: ' + data.message);
                    }
                } catch (error) {
                    console.error('Lỗi khi lưu điểm danh:', error);
                    alert('Có lỗi xảy ra khi lưu điểm danh!');
                }
            });
        });
        
        // Hàm xử lý xóa điểm danh
        function handleDelete() {
            if (confirm('Bạn có chắc chắn muốn xóa bản ghi điểm danh này?')) {
                const btn = this;
                const attendanceId = btn.dataset.id;
                
                fetch(`/academic/attendance/${attendanceId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const row = btn.closest('tr');
                        
                        // Reset form
                        row.querySelector('.status-select').value = '';
                        row.querySelector('.note-input').value = '';
                        row.dataset.attendanceId = 'new';
                        
                        // Xóa nút delete
                        btn.remove();
                        
                        // Hiệu ứng xóa
                        row.style.backgroundColor = 'rgba(231, 76, 60, 0.1)';
                        setTimeout(() => {
                            row.style.backgroundColor = '';
                        }, 800);
                        
                        // Thông báo thành công
                        showToast('Đã xóa điểm danh thành công!', 'danger');
                    } else {
                        alert('Lỗi: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Lỗi khi xóa điểm danh:', error);
                    alert('Có lỗi xảy ra khi xóa điểm danh!');
                });
            }
        }
        
        // Add event listeners for delete buttons
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', handleDelete);
        });
        
        // Lưu tất cả
        document.getElementById('saveAllBtn').addEventListener('click', async function() {
            const rows = document.querySelectorAll('tr[data-student-id]');
            const promises = [];
            let hasError = false;
            let successCount = 0;
            let skipCount = 0;
            
            rows.forEach(row => {
                const studentId = row.dataset.studentId;
                const attendanceId = row.dataset.attendanceId;
                const status = row.querySelector('.status-select').value;
                const note = row.querySelector('.note-input').value;
                
                if (status) { // Chỉ lưu những dòng đã chọn trạng thái
                    const promise = fetch(`/academic/attendance/update/${attendanceId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            studentId,
                            date: '<%= moment(selectedDate).format("YYYY-MM-DD") %>',
                            status,
                            note,
                            scheduleId: '<%= schedule._id %>'
                        }),
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            successCount++;
                            // Cập nhật ID nếu là bản ghi mới
                            if (attendanceId === 'new' && data.attendance && data.attendance._id) {
                                row.dataset.attendanceId = data.attendance._id;
                                
                                // Thêm nút xóa nếu chưa có
                                if (!row.querySelector('.delete-btn')) {
                                    const saveBtn = row.querySelector('.save-btn');
                                    const deleteBtn = document.createElement('button');
                                    deleteBtn.className = 'btn btn-sm btn-outline-danger delete-btn';
                                    deleteBtn.title = 'Xóa';
                                    deleteBtn.innerHTML = '<i class="bi bi-trash"></i>';
                                    deleteBtn.dataset.id = data.attendance._id;
                                    saveBtn.after(deleteBtn);
                                    
                                    // Thêm event listener cho nút xóa mới
                                    deleteBtn.addEventListener('click', handleDelete);
                                }
                            }
                            
                            // Hiệu ứng thành công
                            const originalColor = row.style.backgroundColor;
                            row.style.backgroundColor = 'rgba(46, 204, 113, 0.1)';
                            setTimeout(() => {
                                row.style.backgroundColor = originalColor;
                            }, 800);
                            
                            return true;
                        } else {
                            hasError = true;
                            return false;
                        }
                    })
                    .catch(error => {
                        console.error('Lỗi khi lưu điểm danh:', error);
                        hasError = true;
                        return false;
                    });
                    
                    promises.push(promise);
                } else {
                    skipCount++;
                }
            });
            
            if (promises.length === 0) {
                alert('Vui lòng chọn trạng thái điểm danh cho ít nhất một học sinh!');
                return;
            }
            
            const results = await Promise.all(promises);
            
            if (hasError) {
                alert('Có lỗi xảy ra khi lưu điểm danh. Vui lòng kiểm tra lại!');
            } else {
                showToast(`Đã lưu điểm danh thành công cho ${successCount} học sinh!`, 'success');
            }
        });
        
        // Hàm hiển thị toast message
        function showToast(message, type) {
            // Nếu toast container chưa tồn tại, tạo một cái
            if (!document.getElementById('toast-container')) {
                const toastContainer = document.createElement('div');
                toastContainer.id = 'toast-container';
                toastContainer.className = 'position-fixed bottom-0 end-0 p-3';
                toastContainer.style.zIndex = '5';
                document.body.appendChild(toastContainer);
            }
            
            const toastContainer = document.getElementById('toast-container');
            
            // Tạo toast
            const toastId = 'toast-' + Math.random().toString(36).substr(2, 9);
            const toast = document.createElement('div');
            toast.id = toastId;
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            // Nội dung toast
            const flexContainer = document.createElement('div');
            flexContainer.className = 'd-flex';
            
            const toastBody = document.createElement('div');
            toastBody.className = 'toast-body';
            toastBody.textContent = message;
            
            const closeButton = document.createElement('button');
            closeButton.type = 'button';
            closeButton.className = 'btn-close btn-close-white me-2 m-auto';
            closeButton.setAttribute('data-bs-dismiss', 'toast');
            closeButton.setAttribute('aria-label', 'Close');
            
            flexContainer.appendChild(toastBody);
            flexContainer.appendChild(closeButton);
            toast.appendChild(flexContainer);
            toastContainer.appendChild(toast);
            
            // Khởi tạo toast
            const bsToast = new bootstrap.Toast(toast, {
                autohide: true,
                delay: 3000
            });
            
            // Hiển thị toast
            bsToast.show();
            
            // Xóa toast khỏi DOM sau khi bị ẩn
            toast.addEventListener('hidden.bs.toast', function () {
                toast.remove();
            });
        }
    });
</script>

<%- include('../partials/footer') %> 